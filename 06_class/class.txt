패키지
  1. 비슷한 클래스들을 모아 놓은 자바 디렉터리이다.
  2. 계층적으로 만들 수 있다. (패키지 안에 패키지 안에 패키지 안에 ...)
  3. 모두 소문자로 작성한다. (권장)
  4. 실무에서는 호스트와 도메인을 주로 사용한다.
    ex) com.host, co.kr.host, kr.co.host 등


클래스
  1. 객체 지향 언어인 자바는 모든 데이터를 객체로 생성할 수 있다.
  2. 이 때 객체를 만들기 위한 설계도로 클래스를 사용한다.
  3. 어떤 객체가 가져야 하는 값이나 기능을 명시한다.
    1) 값   : 필드    (변수를 의미한다.)
    2) 기능 : 메소드  (함수를 의미한다.)
  4. "패키지.클래스" 형식의 이름을 가진다.


객체
  1. 클래스를 이용해서 만든 실체가 있는 존재이다. (메모리에 존재하는 데이터)
  2. 하나의 클래스를 기반으로 여러 개의 객체를 만들 수 있다.
  3. 참조 타입의 데이터이다.
  4. 메모리에 생성된 객체를 인스턴스(instance)라 한다.

   class Test {
   
   }

   Test test = new Test();
   ---------   -----------
   stack       heap

      ┌--------------┐
  test│  0x10000000  │
      │--------------│
      │     ...      │
      │--------------│
      │              │
      │--------------│
      │   instance   │0x10000000
      │--------------│
      │              │
      └--------------┘


메소드
  1. 클래스가 가지는 기능을 구현할 때 메소드를 이용한다.
  2. 클래스 외부에 있으면 함수, 클래스 내부에 있으면 메소드라고 부른다.
  3. 자바는 클래스 내부에만 만들 수 있으므로 모두 메소드라고 부른다.
  4. 메소드를 만든 뒤(메소드 정의) 메소드를 사용할 수 있다.(메소드 호출)
  5. 메소드 만드는 방법
    반환타입 메소드명([매개변수, ...]) {
      본문
      [return 반환값]
    }


인자와 매개변수
  1. 메소드를 호출할 때 메소드로 전달하는 값을 "인자(Argument)"라고 한다.
  2. 메소드를 정의할 때 "인자(Argument)"를 저장하기 위해 선언하는 변수를 "매개변수(Parameter)"라고 한다.
  3. 메소드 정의
    void method(String item) {
    
    }
  4. 메소드 호출
    method("인자");


반환과 반환타입
  1. 반환 값이 있으면 해당 반환 값의 타입을 메소드에 명시한다.
    String method() {
      return "텍스트";
    }
    int method() {
      return 10;
    }
    boolean method() {
      return true;
    }
  2. 반환 값이 없으면 void 를 메소드에 명시한다.
    void method() {
    
    }


메소드 오버로딩
  1. 동일한 이름의 메소드를 여러 개 작성할 수 있다.
  2. 매개변수는 서로 다르게 작성해야 한다.
  3. 반환타입은 메소드 오버로딩에 영향을 미치지 않는다.


생성자
  1. 인스턴스를 생성할 때 호출하는 특별한 메소드이다.
  2. 인스턴스를 생성할 때만 호출할 수 있다. 
  3. 특징
    1) 이름이 클래스와 같다.
    2) 반환타입이 존재하지 않는다. (void 도 아님. 아예 없음)
    3) 매개변수는 일반 메소드처럼 존재한다. (생성자의 오버로딩이 가능하다.)  


접근 권한
  1. public    : 누구나 접근 가능 (클래스, 메소드의 권한)
  2. protected : 동일 패키지 or 상속 관계의 클래스에서 접근 가능
  3. default   : 동일 패키지에서 접근 가능 (접근 권한이 없는 경우 사용됨)
  4. private   : 동일 클래스에서 접근 가능 (필드의 권한)


Getter 와 Setter
1. 필드 값을 반환하기 위해서 사용하는 메소드를 Getter 라고 한다.
2. Getter 는 "get + 필드" 형식의 이름을 사용해야 한다.
3. 필드 값을 저장하기 위해서 사용하는 메소드를 Setter 라고 한다.
4. Setter 는 "set + 필드" 형식의 이름을 사용해야 한다.
5. boolean 타입의 필드는 이름 규칙에 예외 사항이 있다.

  boolean isHappy;
    또는
  boolean happy;

  public void setHappy(boolean isHappy) {
    this.isHappy = isHappy;
  }

  public boolean isHappy() {
    return isHappy;
  }


인스턴스 멤버
  1. 인스턴스 생성 이후에 사용할 수 있다.
  2. 인스턴스로 호출한다.
  3. 일반적인 필드와 메소드는 모두 인스턴스 멤버이다.


클래스 멤버
  1. 메모리의 클래스 영역에 저장된다.
  2. 인스턴스의 생성이 없어도 접근할 수 있다.
  3. 멤버 앞에 static 키워드를 추가한다.
  4. 클래스로 호출한다. (단 인스턴스로 호출할수도 있으나 권장하지 않는다.)
  5. 클래스 메소드는 오직 클래스 멤버만 호출해서 사용할 수 있다.
    (클래스 메소드는 인스턴스 멤버를 호출할 수 없다.)


메모리 할당 순서
  1. 가장 먼저 클래스 영역(Class)에 클래스 멤버가 생성된다. (static 멤버)
  2. 그 다음으로 스택 영역(Stack)에 지역 변수가 생성된다.
  3. 마지막으로 힙 영역(Heap)에 인스턴스가 생성된다. (인스턴스 멤버)